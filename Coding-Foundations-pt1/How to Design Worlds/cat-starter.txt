(require 2htdp/image)
(require 2htdp/universe)

;; cat-v2.rkt

;; A cat that walks from left to right across the screen.

;; =================
;; Constants:

(define WIDTH 600)
(define HEIGHT 400)

(define CTR-Y (/ HEIGHT 2))

(define SPEED 3)

(define MTS (empty-scene WIDTH HEIGHT))

(define CAT-IMG .)




;; =================
;; Data definitions:

;; Cat is Number
;; interp. x position of the cat in screen coordinates
(define C1 0)           ;left edge
(define C2 (/ WIDTH 2)) ;middle
(define C3 WIDTH)       ;right edge
#;
(define (fn-for-cat c)
  (... c))

;; Template rules used:
;;  - atomic non-distinct: Number



;; =================
;; Functions:

;; Cat -> Cat
;; start the world with (main 0)
;; 
(define (main c)
  (big-bang c                         ; Cat
            (on-tick   advance-cat)   ; Cat -> Cat
            (to-draw   render)        ; Cat -> Image
            (on-key    handle-key)    ; Cat KeyEvent -> Cat
            (on-mouse  handle-mouse))); Cat Integer Integer MouseEvent -> Cat

;; Cat -> Cat
;; produce the next cat, by advancing it SPEED pixel(s) to right
(check-expect (advance-cat 3) (+ 3 SPEED))

;(define (advance-cat c) 0) ;stub

;<use template from Cat>

(define (advance-cat c)
  (+ c SPEED)) 


;; Cat -> Image
;; render the cat image at appropriate place on MTS 
(check-expect (render 4) (place-image CAT-IMG 4 CTR-Y MTS)) 
              
;(define (render c) MTS) ;stub

;<use template from Cat>

(define (render c)
  (place-image CAT-IMG c CTR-Y MTS)) 


;; Cat KeyEvent -> Cat
;; places the cat at CatX = 0 (the edge of the box) when the space key is pressed
(check-expect (handle-key 0 " ")           0)
(check-expect (handle-key 0 "left") 0)
(check-expect (handle-key WIDTH " ")               0)
(check-expect (handle-key WIDTH "left") WIDTH)

;(define (handle-key c kye) 0)  ;stub

(define (handle-key CatX ke)
  (cond [(key=? ke " ") 0]
        [else CatX]))

;; Cat Integer Integer MouseEvent -> Cat
;; moves cat to the x,y postion of the mouse click
(check-expect (handle-mouse 10 500 100 "button-down") 500)
(check-expect (handle-mouse 10 500 100 "button-up") 10)

;(define (handle-mouse Cat x y me) 0) ; stub

(define (handle-mouse Cat x y me)
  (cond [(mouse=? me "button-down") x]
        [else
         Cat]))

































