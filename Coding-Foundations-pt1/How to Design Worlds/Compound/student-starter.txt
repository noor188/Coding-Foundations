
;; student-starter.rkt

;; =================
;; Data definitions:

; 
; PROBLEM A:
; 
; Design a data definition to help a teacher organize their next field trip. 
; On the trip, lunch must be provided for all students. For each student, track 
; their name, their grade (from 1 to 12), and whether or not they have allergies.
; 


(define-struct student (name grade allergies?))
;; Student is (make-student String Natural[1,12] Boolean)
;; interp. a student with name, grade 1-12 and allergies

(define S1 (make-student "Noor"  12 true))
(define S2 (make-student "Alex"   5 false))
#;
(define (fn-for-student s)
  (... (student-name s)         ; String
       (student-grade s)        ; Natural[1,12]
       (student-allergies s)))  ; Boolean

;; Template rules used:
;; - Compound: 3 fields

;; =================
;; Functions:

; 
; PROBLEM B:
; 
; To plan for the field trip, if students are in grade 6 or below, the teacher 
; is responsible for keeping track of their allergies. If a student has allergies, 
; and is in a qualifying grade, their name should be added to a special list. 
; Design a function to produce true if a student name should be added to this list.
; 


;; Student -> Boolean
;; true if student's grade is <= 6 and has allergies
(check-expect (add? S1) false)
(check-expect (add? (make-student "James"  10 false)) false )
(check-expect (add? (make-student "Mike"    4 true ))  true  )        
(check-expect (add? S2) false)
;(define (add? s) true); stub

;<template used from Student>
(define (add? s)
  (and (<= (student-grade s) 6)
       (student-allergies? s)))
