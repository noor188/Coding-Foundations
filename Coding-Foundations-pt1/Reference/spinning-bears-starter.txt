;; spinning-bears-starter.rkt

(require 2htdp/image)
(require 2htdp/universe)

; PROBLEM:
; 
; In this problem you will design another world program. In this program the changing 
; information will be more complex - your type definitions will involve arbitrary 
; sized data as well as the reference rule and compound data. But by doing your 
; design in two phases you will be able to manage this complexity. As a whole, this problem 
; will represent an excellent summary of the material covered so far in the course, and world 
; programs in particular.
; 
; This world is about spinning bears. The world will start with an empty screen. Clicking
; anywhere on the screen will cause a bear to appear at that spot. The bear starts out upright,
; but then rotates counterclockwise at a constant speed. Each time the mouse is clicked on the 
; screen, a new upright bear appears and starts spinning.
; 
; So each bear has its own x and y position, as well as its angle of rotation. And there are an
; arbitrary amount of bears.
; 
; To start, design a world that has only one spinning bear. Initially, the world will start
; with one bear spinning in the center at the screen. Clicking the mouse at a spot on the
; world will replace the old bear with a new bear at the new spot. You can do this part 
; with only material up through compound. 
; 
; Once this is working you should expand the program to include an arbitrary number of bears.
; 
; Here is an image of a bear for you to use: .


;; My world program is a spinning bear

;; =================
;; Constants:
(define HEIGHT 400)
(define WIDTH  600)
(define MTS (empty-scene WIDTH HEIGHT))
(define ANGLE-INCREASE 30)
(define SPEED 1)
(define ANGLE 0)
(define BEAR-IMG .)


;; =================
;; Data definitions:

(define-struct bear (x y angle))
;; Bear is (make-bear Number Number Number)
;; interp. (x,y) postion and angle of bear on the MTS coordinate

(define P-1 (make-bear   0   0  30))
(define P-2 (make-bear 200 300  60))
(define P-3 (make-bear 100 500  359))
#;
(define (fn-for-bear b)
  (... (bear-x b)            ; Number
       (bear-y b)            ; Number
       (bear-angle b)))      ; Number

;; Template rules used:
;; - compound: (make-bear x y angle)

;; ListOfBear is one of:
;; - empty
;; - (cons Bear ListOfBear)
;; interp. a list of bears

(define LOB-1 empty)                ; empty
(define LOB-2 (cons P-1 empty))     ; one bear
(define LOB-3 (cons P-2 LOB-2))     ; two bears
(define LOB-4 (cons P-3 LOB-3))     ; three bears
#;
(define (fn-for-lob lob)
  (cond [(empty? lob) (...)]
        [ else
          (... (fn-for-bear(first lob))        ; bear
               (fn-for-lob(rest lob)))]))      ; ListOfBear

;; =================
;; Functions:

;; ListOfBear -> ListOfBear
;; start the world with (main LOB-1)
;; 
(define (main lob)
  (big-bang lob                          ; ListOfBear
            (on-tick   next-bear)        ; ListOfBear -> ListOfBear
            (to-draw   render-bear)      ; ListOfBear -> Image           
            (on-mouse  mouse-hanlder)))  ; ListOfBear Integer Integer MouseEvent -> ListOfBear
              

;; ListOfBear -> ListOfBear
;; produce the next bear angle by adding 30
(check-expect (next-bear LOB-1) empty)
(check-expect (next-bear LOB-3) (cons (rotate-img  (make-bear 200 300  60)) (cons (rotate-img (make-bear 0 0 30)) empty)))
(check-expect (next-bear LOB-4) (cons (rotate-img  (make-bear 100 500 359)) (cons (rotate-img (make-bear 200 300  60)) (cons (rotate-img (make-bear 0 0 30)) empty))))
;(define (next-bear lob) LOB-1); stub

(define (next-bear lob)
  (cond [(empty? lob) empty]
        [ else
          (cons (rotate-img(first lob))        ; bear
                (next-bear(rest lob)))]))      ; ListOfBear


;; Bear -> Bear
;; Produce the next angle by adding ANGLE-INCREASE
(check-expect (rotate-img P-1 ) (make-bear   0   0 (+ 30 30)))
(check-expect (rotate-img P-3)  (make-bear 100 500 (- (+ 359 30) 360 )))
;(define (rotate-img a) 0); stub

(define(rotate-img b)
  (make-bear (bear-x b)
             (bear-y b)
             (if (> (+ 30 (bear-angle b)) 359)
                (- (+ 30 (bear-angle b)) 360)
                (+ 30 (bear-angle b)))
       ))


;; ListOfBear -> Image
;; render all BEAR-IMGs in the provided list into its (x,y) postion on the MTS 
(check-expect (render-bear LOB-1) MTS)
(check-expect (render-bear LOB-2) (place-image (rotate-bear P-1) 0   0 MTS))
(check-expect (render-bear LOB-3) (place-image
                                   (rotate-bear P-2)
                                   200 300
                                   (place-image
                                    (rotate-bear P-1)
                                    0 0 
                                    MTS))
                                  )
;(define (render-bear lob) MTS); stub

(define (render-bear lob)
  (cond [(empty? lob) MTS]
        [ else
          (place-image (rotate-bear (first lob))
                (bear-x (first lob)) (bear-y (first lob))
               (render-bear(rest lob)))]))

;; Bear -> Image
;; rotates BEAR-IMG by bear-angle
(check-expect (rotate-bear P-1) (rotate 30  BEAR-IMG))
(check-expect (rotate-bear P-3) (rotate 359 BEAR-IMG))
;(define (rotate-bear b) MTS); stub

(define (rotate-bear p)
  (rotate (bear-angle p) BEAR-IMG))  


;; ListOfBear Integer Integer MouseEvent -> ListOfBear
;; clicking the mouse at a spot on the MTS will create a new bear at the new spot that's upright it will be added to the listOfBear
(check-expect (mouse-hanlder LOB-1 500 100 "button-down") (cons (make-bear 500 100 ANGLE) LOB-1))
(check-expect (mouse-hanlder LOB-1 500 100 "enter") LOB-1)
(check-expect (mouse-hanlder LOB-3 500 100 "button-down") (cons (make-bear 500 100 ANGLE) LOB-3))
(check-expect (mouse-hanlder LOB-3 500 100 "enter") LOB-3)
;(define (mouse-hanlder lob x y me) LOB-1); stub

(define (mouse-hanlder lob x y me)
  ( cond [(mouse=? me "button-down") (cons (make-bear x y ANGLE) lob)]
         [else lob]))






