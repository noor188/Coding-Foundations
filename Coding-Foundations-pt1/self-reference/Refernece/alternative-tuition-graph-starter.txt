
;; alternative-tuition-graph-starter.rkt

; 
; Consider the following alternative type comment for Eva's school tuition 
; information program. Note that this is just a single type, with no reference, 
; but it captures all the same information as the two types solution in the 
; videos.
; 
; (define-struct school (name tuition next))
; ;; School is one of:
; ;;  - false
; ;;  - (make-school String Natural School)
; ;; interp. an arbitrary number of schools, where for each school we have its
; ;;         name and its tuition in USD
; 
; (A) Confirm for yourself that this is a well-formed self-referential data 
;     definition.
; 
; (B) Complete the data definition making sure to define all the same examples as 
;     for ListOfSchool in the videos.
; 
; (C) Design the chart function that consumes School. Save yourself time by 
;     simply copying the tests over from the original version of chart.
; 
; (D) Compare the two versions of chart. Which do you prefer? Why?
; 


(require 2htdp/image)

;; Constants:

(define FONT-SIZE 24)
(define FONT-COLOR "black")
(define FONT-ANGLE 90)

(define Y-SCALE   1/200)
(define BAR-WIDTH 30)
(define BAR-COLOR "lightblue")
(define SPACE 5)

;; Data Definition

(define-struct school (name tuition next))
;; School is one of:
;;  - false
;;  - (make-school String Natural School)
;; interp. an arbitrary number of schools, where for each school we have its
;;         name and its tuition in USD

(define S-1 false)
(define S-2 (make-school "NMSU" 20000 false))
(define S-3 (make-school "UTEP" 15000 (make-school "NMSU" 20000 false)))
#;
(define (fn-for-school s)
  (cond [(false? s) (...)]
        [ else
          (... (school-name s)                           ; String
               (school-tuition s)                        ; Natural 
               (fn-for-school(school-next s)))]))        ; School

;; Template rules used:
;; one of: 2 cases
;; atomic distinct : false
;; compound: (make-school name tuition next)
;; atomic non-distinct: String
;; atomic non-distinct: Natural
;; self-refernece: (school-next s) School

;; Functions

;; School -> Image
;; Produce a chart for all schools in the list
(check-expect (chart S-1)
              (rectangle 0 0 "solid"   BAR-COLOR)
              )
(check-expect (chart S-2)
              (beside/align "bottom"
              (overlay
               (rotate    FONT-ANGLE (text (school-name S-2) FONT-SIZE FONT-COLOR))
               (rectangle BAR-WIDTH  (* Y-SCALE (school-tuition S-2)) "solid"   BAR-COLOR)
               (rectangle BAR-WIDTH  (* Y-SCALE (school-tuition S-2)) "outline" "black")
              )
              (rectangle 0 0 "solid"   BAR-COLOR)
              ))
(check-expect (chart S-3)
              (beside/align "bottom"
                (overlay
               (rotate    FONT-ANGLE(text (school-name S-3) FONT-SIZE FONT-COLOR))
               (rectangle BAR-WIDTH (* Y-SCALE (school-tuition S-3)) "solid"   BAR-COLOR)
               (rectangle BAR-WIDTH (* Y-SCALE (school-tuition S-3)) "outline" "black"))
               
               (overlay
               (rotate    FONT-ANGLE(text (school-name (school-next S-3)) FONT-SIZE FONT-COLOR))
               (rectangle BAR-WIDTH (* Y-SCALE (school-tuition (school-next S-3))) "solid"   BAR-COLOR)
               (rectangle BAR-WIDTH (* Y-SCALE (school-tuition (school-next S-3))) "outline" "black"))

               (rectangle 0 0 "solid"   BAR-COLOR)
              ))

;(define (chart s) (circle 4 "solid" "red")); stub

;< template used from School>

(define (chart s)
  (cond [(false? s) (rectangle 0 0 "solid"   BAR-COLOR)]
        [ else
          (beside/align "bottom"
                (overlay
                  (rotate    FONT-ANGLE (text (school-name s) FONT-SIZE FONT-COLOR))
                  (rectangle BAR-WIDTH  (* Y-SCALE (school-tuition s)) "solid"   BAR-COLOR)
                  (rectangle BAR-WIDTH  (* Y-SCALE (school-tuition s)) "outline" "black")
                 )          
               (chart(school-next s)))]))        ; School

