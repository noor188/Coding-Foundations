(require 2htdp/image)

;; tuition-graph-starter.rkt  (just the problem statements)
;; tuition-graph-v1.rkt       (includes constants)
;; tuition-graph-v2.rkt       (includes complete School and ListOfSchool type comment)
;; tuition-graph-v3.rkt       (includes both complete data definitions)

; 
; PROBLEM:
; 
; Eva is trying to decide where to go to university. One important factor for her is 
; tuition costs. Eva is a visual thinker, and has taken Systematic Program Design, 
; so she decides to design a program that will help her visualize the costs at 
; different schools. She decides to start simply, knowing she can revise her design
; later.
; 
; The information she has so far is the names of some schools as well as their 
; international student tuition costs. She would like to be able to represent that
; information in bar charts like this one:
; 
; 
;         .
;         
; (A) Design data definitions to represent the information Eva has.
; (B) Design a function that consumes information about schools and their
;     tuition and produces a bar chart.
; (C) Design a function that consumes information about schools and produces
;     the school with the lowest international student tuition.
; 




(require 2htdp/image)

;; Constants:

(define FONT-SIZE 24)
(define FONT-COLOR "black")
(define FONT-ANGLE 90)

(define Y-SCALE   1/200)
(define BAR-WIDTH 30)
(define BAR-COLOR "lightblue")
(define SPACE 5)

;; Data definitions:

(define-struct school (name tuition))
;; School is (make-school String Natural)
;; interp. name is the school's name, tuition is international-students tuition in USD

(define S1 (make-school "School1" 27797)) ;We encourage you to look up real schools
(define S2 (make-school "School2" 23300)) ;of interest to you -- or any similar data.
(define S3 (make-school "School3" 28500)) ;
#;
(define (fn-for-school s)
  (... (school-name s)
       (school-tuition s)))

;; Template rules used:
;;  - compound: (make-school String Natural)


;; ListOfSchool is one of:
;;  - empty
;;  - (cons School ListOfSchool)
;; interp. a list of schools
(define LOS1 empty)
(define LOS2 (cons S1 (cons S2 (cons S3 empty))))

(define (fn-for-los los)
  (cond [(empty? los) (...)]
        [else
         (... (fn-for-school (first los))
              (fn-for-los (rest los)))]))

;; Template rules used:
;;  - one of: 2 cases
;;  - atomic distinct: empty
;;  - compound: (cons School ListOfSchool)
;;  - reference: (first los) is School
;;  - self-reference: (rest los) is ListOfSchool


;; Functions:
 
;; ListOfSchool -> Image
;; Produce a bar chat of rectangles equal to ListOfSchool length, if ListOfSchool is empty produce a 0,0 (height,width) rectangle
(check-expect (bar-chart LOS1) (rectangle 0 0 "outline" BAR-COLOR))
(check-expect (bar-chart (cons (make-school "S1" 8000) empty)) (beside/align "bottom"
                                (overlay
                                (rotate FONT-ANGLE (text "S1" FONT-SIZE FONT-COLOR))
                                (rectangle BAR-WIDTH (* 8000 Y-SCALE) "solid" BAR-COLOR)
                                (rectangle BAR-WIDTH (* 8000 Y-SCALE) "outline" "black"))
                                (rectangle 0 0 "outline" BAR-COLOR)))
(check-expect (bar-chart LOS2) (beside/align "bottom"
                                (overlay
                                (rotate FONT-ANGLE (text (school-name S1) FONT-SIZE FONT-COLOR))
                                (rectangle BAR-WIDTH (* (school-tuition S1) Y-SCALE) "solid" BAR-COLOR)
                                (rectangle BAR-WIDTH (* (school-tuition S1) Y-SCALE) "outline" "black"))
                                (overlay
                                (rotate FONT-ANGLE (text (school-name S2) FONT-SIZE FONT-COLOR))
                                (rectangle BAR-WIDTH (* (school-tuition S2) Y-SCALE) "solid" BAR-COLOR)
                                (rectangle BAR-WIDTH (* (school-tuition S2) Y-SCALE) "outline" "black"))
                                (overlay
                                (rotate FONT-ANGLE (text (school-name S3) FONT-SIZE FONT-COLOR))
                                (rectangle BAR-WIDTH (* (school-tuition S3) Y-SCALE) "solid" BAR-COLOR)
                                (rectangle BAR-WIDTH (* (school-tuition S3) Y-SCALE) "outline" "black"))))
;(define (bar-chart los) (circle 10 "solid" "red")); stub

; <template used from ListOfSchool>
(define (bar-chart los)
  (cond [(empty? los) (rectangle 0 0 "outline" BAR-COLOR)]
        [else
         (beside/align "bottom"
                       (overlay
                                (rotate    FONT-ANGLE   (text (school-name (first los)) FONT-SIZE FONT-COLOR))
                                (rectangle BAR-WIDTH    (* (school-tuition (first los)) Y-SCALE)  "solid" BAR-COLOR)
                                (rectangle BAR-WIDTH    (* (school-tuition (first los)) Y-SCALE)  "outline" "black"))                       
                       (bar-chart (rest los)))]))







