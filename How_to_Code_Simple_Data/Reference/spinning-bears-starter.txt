;; spinning-bears-starter.rkt

(require 2htdp/image)
(require 2htdp/universe)

; PROBLEM:
; 
; In this problem you will design another world program. In this program the changing 
; information will be more complex - your type definitions will involve arbitrary 
; sized data as well as the reference rule and compound data. But by doing your 
; design in two phases you will be able to manage this complexity. As a whole, this problem 
; will represent an excellent summary of the material covered so far in the course, and world 
; programs in particular.
; 
; This world is about spinning bears. The world will start with an empty screen. Clicking
; anywhere on the screen will cause a bear to appear at that spot. The bear starts out upright,
; but then rotates counterclockwise at a constant speed. Each time the mouse is clicked on the 
; screen, a new upright bear appears and starts spinning.
; 
; So each bear has its own x and y position, as well as its angle of rotation. And there are an
; arbitrary amount of bears.
; 
; To start, design a world that has only one spinning bear. Initially, the world will start
; with one bear spinning in the center at the screen. Clicking the mouse at a spot on the
; world will replace the old bear with a new bear at the new spot. You can do this part 
; with only material up through compound. 
; 
; Once this is working you should expand the program to include an arbitrary number of bears.
; 
; Here is an image of a bear for you to use: .


;; My world program is a spinning bear

;; =================
;; Constants:
(define HEIGHT 400)
(define WIDTH  600)
(define MTS (empty-scene WIDTH HEIGHT))
(define ANGLE-INCREASE 30)
(define SPEED 1)
(define BEAR-IMG .)


;; =================
;; Data definitions:

(define-struct bear (x y angle))
;; Bear is (make-bear Number Number Number)
;; interp. (x,y) postion and angle of bear on the MTS coordinate

(define P-1 (make-bear   0   0  30))
(define P-2 (make-bear 200 300  60))
#;
(define (fn-for-position p)
  (... (bear-x p)            ; Number
       (bear-y p)            ; Number
       (bear-angle p)))      ; Number

;; Template rules used:
;; - compound: (make-bear x y angle)


;; =================
;; Functions:

;; Bear -> Bear
;; start the world with (main (make-bear (/ WIDTH 2) (/ HEIGHT 2) 0))
;; 
(define (main p)
  (big-bang p                            ; Bear
            (on-tick   next-bear)        ; Bear -> Bear
            (to-draw   render-bear)      ; Bear -> Image           
            (on-mouse  mouse-hanlder)))  ; Bear Integer Integer MouseEvent -> Bear
              

;; Bear -> Bear
;; produce the next bear angle by adding 30
(check-expect (next-bear (make-bear   0   0  30)) (make-bear 0 0     (rotate-img 30)))
(check-expect (next-bear (make-bear 300 100 359)) (make-bear 300 100 (rotate-img 359)))
;(define (next-bear p) P-1); stub

(define (next-bear p)
  (make-bear (bear-x p)(bear-y p)
             (rotate-img (bear-angle p))
  ))      

;; Number -> Number
;; Produce the next angle by adding ANGLE-INCREASE
(check-expect (rotate-img 30 ) (+ 30 30))
(check-expect (rotate-img 359) (- (+ 359 30) 360 ))
;(define (rotate-img a) 0); stub

(define(rotate-img a)
  ( if (> (+ 30 a) 359)
           (- (+ 30 a) 360)
           (+ 30 a)
       ))

;; Bear -> Image
;; render BEAR-IMG into (x,y) postion on the MTS 
(check-expect (render-bear (make-bear 0 0      30)) (place-image (rotate 30  BEAR-IMG) 0   0   MTS))
(check-expect (render-bear (make-bear 300 100 359)) (place-image (rotate 359 BEAR-IMG) 300 100 MTS))
;(define (render-bear p) MTS); stub

(define (render-bear p)
  (place-image (rotate (bear-angle p) BEAR-IMG) (bear-x p) (bear-y p) MTS))     

;; Bear Integer Integer MouseEvent -> Bear
;; clicking the mouse at a spot on the MTS will replace the old bear with a new bear at the new spot
(check-expect (mouse-hanlder (make-bear 300 100 359) 500 100 "button-down") (make-bear 500 100 359))
(check-expect (mouse-hanlder (make-bear 300 100 359) 500 100 "enter") (make-bear 300 100 359))
;(define (mouse-hanlder p x y me) P-1); stub

(define (mouse-hanlder p x y me)
  ( cond [(mouse=? me "button-down") (make-bear x y(bear-angle p) )]
        [else p]))   






