;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-reader.ss" "lang")((modname render-bst-starter) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
(require 2htdp/image)

;; render-bst-starter.rkt

; 
; Consider the following data definition for a binary search tree: 
; 


;; Constants:
(define CIRCLE (circle 20 "outline" "blue"))
(define TEXT-SIZE 10)
(define TEXT-COLOR "Black")
(define ARROW-L (line -30 20 "Black"))
(define ARROW-R (line  30 20 "Black"))
(define HSPACE  (rectangle 1 15 "solid" "white"))
(define VSPACE  (rectangle 15 5 "solid" "white"))
(define MTTREE  (rectangle 20 10 "solid" "white"))


;; Data definitions:

(define-struct node (key val l r))
;; A BST (Binary Search Tree) is one of:
;;  - false
;;  - (make-node Integer String BST BST)
;; interp. false means no BST, or empty BST
;;         key is the node key
;;         val is the node val
;;         l and r are left and right subtrees
;; INVARIANT: for a given node:
;;     key is > all keys in its l(eft)  child
;;     key is < all keys in its r(ight) child
;;     the same key never appears twice in the tree
; .

(define BST0  false)
(define BST1  (make-node 1 "abc" false false))
(define BST4  (make-node 4 "dcj" false (make-node 7 "ruf" false false)))
(define BST3  (make-node 3 "ilk" BST1 BST4))
(define BST27 (make-node 27 "wit" (make-node 14 "olp" false false) false))
(define BST42 
  (make-node 42 "ily"
             BST27
             (make-node 50 "dug" false false)))
(define BST10
  (make-node 10 "why" BST3 BST42))
#;
(define (fn-for-bst t)
  (cond [(false? t) (...)]
        [else
         (... (node-key t)    ;Integer
              (node-val t)    ;String
              (fn-for-bst (node-l t))
              (fn-for-bst (node-r t)))]))

;; Template rules used:
;;  - one of: 2 cases
;;  - atomic-distinct: false
;;  - compound: (make-node Integer String BST BST)
;;  - self reference: (node-l t) has type BST
;;  - self reference: (node-r t) has type BST

;; Functions:
; PROBLEM:
; 
; Design a function that consumes a bst and produces a SIMPLE 
; rendering of that bst. Emphasis on SIMPLE. You might want to 
; skip the lines for example.
; 


;; BST -> Image
;; Produce a render of the BST
(check-expect (render-bst BST0) MTTREE); false
(check-expect (render-bst BST1)  (above (overlay CIRCLE
                                                 (text "1:abc" TEXT-SIZE TEXT-COLOR))
                                        VSPACE
                                        (beside
                                         (render-bst BST0)
                                         HSPACE
                                         (render-bst BST0)))); 1
(check-expect (render-bst BST27) (above
                                  (overlay CIRCLE
                                           (text "27:wit" TEXT-SIZE TEXT-COLOR))
                                  VSPACE
                                  (beside
                                   (above (overlay CIRCLE
                                                   (text "14:olp" TEXT-SIZE TEXT-COLOR))
                                          VSPACE
                                          (beside
                                           (render-bst BST0)
                                           HSPACE
                                           (render-bst BST0)))
                                   HSPACE
                                   (render-bst BST0))
                                  )); 2 c l
(check-expect (render-bst BST4) (above
                                 (overlay CIRCLE
                                          (text "4:dcj" TEXT-SIZE TEXT-COLOR))
                                 VSPACE
                                 (beside
                                  (render-bst BST0)
                                  HSPACE
                                  (render-bst (make-node 7 "ruf" false false))))); 1 r

;(define (render-bst t) MTTREE); stub

(define (render-bst t)
  (cond [(false? t) MTTREE]
        [else
         (above (draw-node t)
                VSPACE                
                (beside
                 (render-bst (node-l t))
                 HSPACE
                 (render-bst (node-r t))))]))

;; Node -> Image
;; Draws a node : text (key:value) above a circle
(check-expect (draw-node (make-node 1 "abc" false false))(overlay CIRCLE
                                                                  (text "1:abc" TEXT-SIZE TEXT-COLOR))) ; no children
(check-expect (draw-node (make-node 3 "def"  BST1 BST4)) (overlay CIRCLE
                                                                  (text "3:def" TEXT-SIZE TEXT-COLOR))) ; 2 children

(check-expect (draw-node (make-node 27 "wit" (make-node 14 "olp" false false) false))(overlay CIRCLE
                                                                                              (text "27:wit" TEXT-SIZE TEXT-COLOR))
              ) ; 1 child left
(check-expect (draw-node (make-node 4 "dcj" false (make-node 7 "ruf" false false))) (overlay CIRCLE
                                                                                             (text "4:dcj" TEXT-SIZE TEXT-COLOR))) ; 1 child right
;; function composition : draw-circle, draw-arrows
;; (node-key t)(node-val t)   use (draw-arrows t) inside
;(define (draw-node t) MTTREE); stub

(define (draw-node t)
  (cond [(false? t) MTTREE]
        [else
         (overlay CIRCLE
                  (text (string-append (number->string (node-key t)) ":" (node-val t) ) TEXT-SIZE TEXT-COLOR))]))

