
;; render-bst-w-lines-starter.rkt

(require 2htdp/image)

; PROBLEM:
; 
; Given the following data definition for a binary search tree,
; design a function that consumes a bst and produces a SIMPLE 
; rendering of that bst including lines between nodes and their 
; subnodes.
; 
; To help you get started, we've added some sketches below of 
; one way you could include lines to a bst.


;; Constants

(define TEXT-SIZE  14)
(define TEXT-COLOR "BLACK")
(define KEY-VAL-SEPARATOR ":")
(define MTTREE (rectangle 20 1 "solid" "red"))
(define NODE-WIDTH 70)
(define NODE-HEIGHT 20)
(define NODE (rectangle NODE-WIDTH NODE-HEIGHT "outline" "black"))
(define EMPTY-NODE (rectangle NODE-WIDTH NODE-HEIGHT "outline" "purple"))


;; Data definitions:

(define-struct node (key val l r))
;; A BST (Binary Search Tree) is one of:
;;  - false
;;  - (make-node Integer String BST BST)
;; interp. false means no BST, or empty BST
;;         key is the node key
;;         val is the node val
;;         l and r are left and right subtrees
;; INVARIANT: for a given node:
;;     key is > all keys in its l(eft)  child
;;     key is < all keys in its r(ight) child
;;     the same key never appears twice in the tree


; .

(define BST0 false)
(define BST1 (make-node 1 "abc" false false))
(define BST7 (make-node 7 "ruf" false false)) 
(define BST4 (make-node 4 "dcj" false (make-node 7 "ruf" false false)))
(define BST3 (make-node 3 "ilk" BST1 BST4))
(define BST14 (make-node 14 "olp" false false))
(define BST27  (make-node 27 "wit" (make-node 14 "olp" false false) false))
(define BST42 
  (make-node 42 "ily"
             BST27
             (make-node 50 "dug" false false)))
(define BST10
  (make-node 10 "why" BST3 BST42))
(define BST100 
  (make-node 100 "large" BST10 false))
#;
(define (fn-for-bst t)
  (cond [(false? t) (...)]
        [else
         (... (node-key t)    ;Integer
              (node-val t)    ;String
              (fn-for-bst (node-l t))
              (fn-for-bst (node-r t)))]))

;; Template rules used:
;;  - one of: 2 cases
;;  - atomic-distinct: false
;;  - compound: (make-node Integer String BST BST)
;;  - self reference: (node-l t) has type BST
;;  - self reference: (node-r t) has type BST

;; Functions:

; 
; Here is a sketch of one way the lines could work. What 
; this sketch does is allows us to see the structure of
; the functions pretty clearly. We'll have one helper for
; the key value image, and one helper to draw the lines.
; Each of those produces a rectangular image of course.
; 
; .
; 
; And here is a sketch of the helper that draws the lines:
; .  
; where lw means width of left subtree image and
;       rw means width of right subtree image
.
;; BST -> Image
;; Render an image of the input BST with lines between nodes and their subnodes
(check-expect (render-bst false) MTTREE)
(check-expect (render-bst BST1 ) (above (render-node 1 "abc") 
                                        (lines (image-width (render-bst false))
                                               (image-width (render-bst false)))
                                        (beside (render-bst false)
                                                (render-bst false))))


(define (render-bst t)
  (cond [(false? t) MTTREE]
        [else
         (above (overlay (render-node(node-key t)(node-val t))
                         (lines (image-width (render-bst (node-l t)))
                                (image-width (render-bst (node-r t))))
                         (beside (render-bst (node-l t))
                                 (render-bst (node-r t)))))])); stub

;; Integer String -> Image
;; Produce a node, text on top of a node
(check-expect (render-node 1 "abc") (overlay
                                     (text (string-append "1" KEY-VAL-SEPARATOR "abc") TEXT-SIZE TEXT-COLOR)
                                     NODE))
;(define (render-node key val) MTTREE); stub

(define (render-node key val)
  (overlay
   (text (string-append (number->string key) KEY-VAL-SEPARATOR "abc") TEXT-SIZE TEXT-COLOR)
   NODE))

;; Integer Integer -> Image
;; Produce 2 lines for a node
(check-expect (lines 100 100)(add-line (add-line (rectangle (+ 100 100) (/(+ 100 100) 4) "outline" "black")
                                                 (/ (+ 100 100)2) 0 (/ 100 2) (/(+ 100 100) 4) "black"
                                                 )
                                       (/ (+ 100 100)2) 0  (+ 100 (/ 100 2)) (/(+ 100 100) 4) "black"))
;(define (lines lw rw) MTTREE); stub

(define (lines lw rw)
  (add-line (add-line (rectangle (+ lw rw) (/(+ lw rw) 4) "outline" "black")
                      (/ (+ rw lw)2) 0 (/ rw 2) (/(+ lw rw) 4) "black"
                      )
            (/ (+ rw lw)2) 0  (+ lw (/ rw 2)) (/(+ lw rw) 4) "black"))
