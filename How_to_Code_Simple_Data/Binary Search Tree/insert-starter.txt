
;; insert-starter.rkt

; 
; PROBLEM:
; 
; Design a function that consumes an Integer, String and BST, and adds a node
; that has the given key and value to the tree. The node should be inserted in 
; the proper place in the tree. The function can assume there is not already 
; an entry for that number in the tree. The function should produce the new BST.
; 
; Do not worry about keeping the tree balanced. We will come back to this later.
; 


;; Data definitions:

(define-struct node (key val l r))
;; A BST (Binary Search Tree) is one of:
;;  - false
;;  - (make-node Integer String BST BST)
;; interp. false means no BST, or empty BST
;;         key is the node key
;;         val is the node val
;;         l and r are left and right subtrees
;; INVARIANT: for a given node:
;;     key is > all keys in its l(eft)  child
;;     key is < all keys in its r(ight) child
;;     the same key never appears twice in the tree

(define BST0 false)
(define BST1 (make-node 1 "abc" false false))
(define BST4 (make-node 4 "dcj" false (make-node 7 "ruf" false false)))
(define BST3 (make-node 3 "ilk" BST1 BST4))
(define BST42 
  (make-node 42 "ily"
             (make-node 27 "wit" (make-node 14 "olp" false false) false)
             false))
(define BST10 (make-node 10 "why" BST3 BST42))

; .

#;
(define (fn-for-bst t)
  (cond [(false? t) (...)]
        [else
         (... (node-key t)    ;Integer
              (node-val t)    ;String
              (fn-for-bst (node-l t))
              (fn-for-bst (node-r t)))]))

;; Template rules used:
;;  - one of: 2 cases
;;  - atomic-distinct: false
;;  - compound: (make-node Integer String BST BST)
;;  - self reference: (node-l t) has type BST
;;  - self reference: (node-r t) has type BST

;; Integer String BST -> BST
;; Insert a node (key:val) into it's pos in the BST
(check-expect (insert-node  0 "A" BST3) (make-node 3 "ilk" (make-node 1 "abc" (make-node 0 "A" false false) false) BST4))
(check-expect (insert-node  5 "B" BST3) (make-node 3 "ilk" BST1 (make-node 4 "dcj" false (make-node 7 "ruf" (make-node 5 "B" false false) false))))
(check-expect (insert-node  6 "D" BST3) (make-node 3 "ilk" BST1 (make-node 4 "dcj" false (make-node 7 "ruf" (make-node 6 "D" false false) false))))
(check-expect (insert-node 52 "E" BST10)(make-node 10 "why" BST3 (make-node 42 "ily"
                                                                            (make-node 27 "wit" (make-node 14 "olp" false false) false)
                                                                            (make-node 52 "E" false false))))
(check-expect (insert-node  30 "F" BST42) (make-node 42 "ily"
                                                     (make-node 27 "wit" (make-node 14 "olp" false false) (make-node 30 "F" false false))
                                                     false))
;(define (insert-node int str bst) bst); stub

(define (insert-node i s t)
  (insert-node-bst (make-node i s false false) t))

;; Node BST -> BST
;; insert node inot BST
(check-expect (insert-node-bst (make-node  1 "C" false false) BST0 )  (make-node 1 "C"   false false))
(check-expect (insert-node-bst (make-node  0 "A" false false) BST3 )  (make-node 3 "ilk" (make-node 1 "abc" (make-node 0 "A" false false) false) BST4))
(check-expect (insert-node-bst (make-node  5 "B" false false) BST3 )  (make-node 3 "ilk" BST1 (make-node 4 "dcj" false (make-node 7 "ruf" (make-node 5 "B" false false) false))))
(check-expect (insert-node-bst (make-node  6 "D" false false) BST3 )  (make-node 3 "ilk" BST1 (make-node 4 "dcj" false (make-node 7 "ruf" (make-node 6 "D" false false) false))))
(check-expect (insert-node-bst (make-node 52 "E" false false) BST10) (make-node 10 "why" BST3 (make-node 42 "ily"
                                                                                                         (make-node 27 "wit" (make-node 14 "olp" false false) false)
                                                                                                         (make-node 52 "E" false false))))
(check-expect (insert-node-bst (make-node 30 "F" false false) BST42) (make-node 42 "ily"
                                                                                (make-node 27 "wit" (make-node 14 "olp" false false) (make-node 30 "F" false false))
                                                                                false))
;(define (insert-node-bst n bst prev) bst)

(define (insert-node-bst n t)
  (cond [(false? t) n]          
        [else
         (cond [(< (node-key n) (node-key t))(make-node (node-key t)(node-val t)(insert-node-bst n (node-l t)) (node-r t) )]
               [else
                (make-node (node-key t)(node-val t) (node-l t)(insert-node-bst n (node-r t)))])]))