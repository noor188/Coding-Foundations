(require 2htdp/image)

;; arrange-images-starter.rkt (problem statement)
;; arrange-images-v1.rkt      (includes ListOfImage)
;; arrange-images-v2.rkt      (includes arrange-images and 2 wish-list entries)
;; arrange-images-v3.rkt      (includes arrange-images and layout-images, stub for sort-images)

; 
; PROBLEM:
; 
; In this problem imagine you have a bunch of pictures that you would like to 
; store as data and present in different ways. We'll do a simple version of that 
; here, and set the stage for a more elaborate version later.
; 
; (A) Design a data definition to represent an arbitrary number of images.
; 
; (B) Design a function called arrange-images that consumes an arbitrary number
;     of images and lays them out left-to-right in increasing order of size.
;     


;; Constants:

(define BLANK (square 0 "solid" "white"))

;; Data definitions:

;; ListOfImage is one of:
;;  - empty
;;  - (cons Image ListOfImage)
;; interp. An arbitrary number of images
(define LOI1 empty)
(define LOI2 (cons (rectangle 10 20 "solid" "blue")
                   (cons (rectangle 20 30 "solid" "red")
                         empty)))
#;
(define (fn-for-loi loi)
  (cond [(empty? loi) (...)]
        [else
         (... (first loi)
              (fn-for-loi (rest loi)))]))

;; Functions:

;; ListOfImage -> Image
;; lay out images left to right in increasing order of size
;; sort images in increasing order of size and then lay them out left-to-right
(check-expect (arrange-images (cons (rectangle 10 20 "solid" "blue")
                                    (cons (rectangle 20 30 "solid" "red")
                                          empty)))
              (beside (rectangle 10 20 "solid" "blue")
                      (rectangle 20 30 "solid" "red")              
                      BLANK))
(check-expect (arrange-images (cons (rectangle 20 30 "solid" "red")
                                    (cons (rectangle 10 20 "solid" "blue")
                                          empty)))
              (beside (rectangle 10 20 "solid" "blue")
                      (rectangle 20 30 "solid" "red")              
                      BLANK))

;(define (arrange-images loi) BLANK) ;stub

(define (arrange-images loi)
  (layout-images (sort-images loi)))


;; ListOfImage -> Image
;; place images beside each other in order of list
(check-expect (layout-images empty) BLANK)
(check-expect (layout-images (cons (rectangle 10 20 "solid" "blue")
                                   (cons (rectangle 20 30 "solid" "red")
                                         empty)))
              (beside (rectangle 10 20 "solid" "blue")
                      (rectangle 20 30 "solid" "red")
                      BLANK))

;(define (layout-images loi) BLANK) ;stub

(define (layout-images loi)
  (cond [(empty? loi) BLANK]
        [else
         (beside (first loi)
                 (layout-images (rest loi)))]))

;; ListOfImage -> ListOfImage
;; sort images in increasing order of size 
(check-expect (sort-images empty) empty)
(check-expect (sort-images (cons (rectangle 20 30 "solid" "red")
                                 (cons (rectangle 10 20 "solid" "blue")
                                       empty))) (cons (rectangle 10 20 "solid" "blue")
                                                      (cons (rectangle 20 30 "solid" "red")
                                                            empty)))
;(define (sort-images loi) loi); stub

(define (sort-images loi)
  (cond [(empty? loi) empty]
        [else
         (insert (first loi)
                 (sort-images (rest loi)))]))

;; Image ListOfImage -> ListOfImage
;; insert Image into it's position on ListOfImage (assume it's sorted)
(check-expect (insert (rectangle 5 30 "solid" "red") empty) (cons (rectangle 5 30 "solid" "red") empty))
(check-expect (insert (rectangle 5 30 "solid" "red") (cons (rectangle 10 20 "solid" "blue")
                                                           (cons (rectangle 20 30 "solid" "red")
                                                                 empty))) (cons (rectangle 5 30 "solid" "red")
                                                                                (cons (rectangle 10 20 "solid" "blue")
                                                                                      (cons (rectangle 20 30 "solid" "red")
                                                                                            empty))))
(check-expect (insert (rectangle 20 20 "solid" "red") (cons (rectangle 10 20 "solid" "blue")
                                                           (cons (rectangle 20 30 "solid" "red")
                                                                 empty))) (cons (rectangle 10 20 "solid" "blue")
                                                                                (cons (rectangle 20 20 "solid" "red")
                                                                                      (cons (rectangle 20 30 "solid" "red")
                                                                                            empty))))
(check-expect (insert (rectangle 30 90 "solid" "red") (cons (rectangle 10 20 "solid" "blue")
                                                           (cons (rectangle 20 30 "solid" "red")
                                                                 empty))) (cons (rectangle 10 20 "solid" "blue")
                                                                                (cons (rectangle 20 30 "solid" "red")
                                                                                      (cons (rectangle 30 90 "solid" "red")
                                                                                            empty))))
;(define (insert img loi) loi); stub

(define (insert img loi)
  (cond [(empty? loi) (cons img empty)]
        [else
         (if (larger? img (first loi))
             (cons (first loi) (insert img (rest loi)))
             (cons img loi)
             )]))

;; Image Image -> Boolean
;; Produce true if img1 area is greater than img2 area
(check-expect (larger? (rectangle 20 30 "solid" "red") (rectangle 40 30 "solid" "red")) false)
(check-expect (larger? (rectangle 50 30 "solid" "red") (rectangle 40 30 "solid" "red")) true)
(check-expect (larger? (rectangle 20 30 "solid" "red") (rectangle 20 30 "solid" "red")) false)
;(define (larger? img1 img2) true); stub

(define (larger? img1 img2)
  (> (* (image-height img1)(image-width img1))
     (* (image-height img2)(image-width img2))))

