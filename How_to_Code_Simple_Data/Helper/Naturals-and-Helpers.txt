(require 2htdp/image)
;; SPD2-Design-Quiz-1.rkt


;; ======================================================================
;; Constants
(define COOKIES .)

;; =========================================
;; Data Definitions

;; Natural is one of:
;; - 0
;; - (add1 Natural)
;; interp. a natural number

(define N0 0) ; 0
(define N1 (add1 N0)); 1
(define N2 (add1 N1)); 2
(define N3 (add1 N2)); 3
#;
(define (fn-for-natural n)
  (cond [(zero? n) (...)]
        [ else
          (... n
               (fn-for-natural(sub1 n)))]) )

;; =========================================
;; Functions

;; Natural Image -> Image
;; Produce n-tall, n-wide pyramid of img
(check-expect (pyramid 0 COOKIES) empty-image)
(check-expect (pyramid 1 COOKIES)     (above COOKIES
                                             empty-image))
(check-expect (pyramid 3 COOKIES) (above empty-image
                                         COOKIES
                                         (beside
                                          COOKIES
                                          COOKIES)
                                         (beside
                                          COOKIES
                                          COOKIES
                                          COOKIES)))
;(define (pyramid n img) empty-image); stub

(define (pyramid n img)
  (cond [(zero? n) empty-image]
        [ else
          (above
           (pyramid (sub1 n) img)
           (row n img))]) )


;; Natural Image -> Image
;; Draws a row on n img
(check-expect (row 0 COOKIES) empty-image)
(check-expect (row 1 COOKIES) COOKIES)
(check-expect (row 3 COOKIES) (beside
                               COOKIES
                               COOKIES
                               COOKIES))
;(define (row n img) empty-image); stub

(define (row n img)
  (cond [(zero? n) empty-image]
        [ else
          (beside COOKIES
                  (row (sub1 n) img))]) )


;; Blob is one of
;; - "solid"
;; - "bubble"

#;
(define (fn-for-blob b)
  (cond [(string=? b "solid")   (...)]
        [(string=? b "bubble")  (...)]))

;; ListOfBlob is one of:
;; - empty
;; - (cons Blob ListOfBlob)
;; interp. list of blobs

(define LOB-0 empty)
(define LOB-1 (cons "solid" empty))
(define LOB-2 (cons "bubble" LOB-1))
#;
(define (fn-for-lob lob)
  (cond [(empty? lob) (...)]
        [else
         (... (fn-for-blob(first lob))  ; Blob
              (fn-for-lob(rest lob)))]))


;; ListOfBlob -> ListOfBlob
;; sinks each solid blob by one
(check-expect (sink empty) empty)
(check-expect (sink (cons "solid"  empty)) (cons "solid"  empty))
(check-expect (sink (cons "solid"  (cons "solid" (cons "solid" empty))))  (cons "solid"  (cons "solid" (cons "solid" empty)))) ; s s s
(check-expect (sink (cons "solid"  (cons "solid" (cons "bubble" empty)))) (cons "bubble" (cons "solid" (cons "solid" empty)))); s s b
(check-expect (sink (cons "solid"  (cons "bubble" (cons "solid" empty)))) (cons "bubble" (cons "solid" (cons "solid" empty)))); s b s
(check-expect (sink (cons "bubble" (cons "solid" (cons "solid" empty))))  (cons "bubble" (cons "solid" (cons "solid" empty)))); b s s
(check-expect (sink (cons "solid"  (cons "solid" (cons "bubble" (cons "bubble" empty)))))(cons "bubble" (cons "solid" (cons "solid" (cons "bubble" empty)))))
;(define (sink lob) lob); stub

(define (sink lob)
  (cond [(empty? lob) empty]
        [else
         (sink-one (first lob)  ; Blob
                   (sink(rest lob)))]))


;; Blob ListOfBlob -> ListOfBlob
;; sinks one blob if it's solid by one
(check-expect (sink-one "solid"   empty) (cons "solid" empty))
(check-expect (sink-one "solid"   (cons "solid" (cons "solid" empty)))  (cons "solid" (cons "solid" (cons "solid" empty))))  ; no sink
(check-expect (sink-one "solid"   (cons "bubble" (cons "solid" empty))) (cons "bubble" (cons "solid" (cons "solid" empty)))) ; sink
(check-expect (sink-one "bubble"  (cons "solid" (cons "solid" empty)))  (cons "bubble" (cons "solid" (cons "solid" empty)))) ; no sink
(check-expect (sink-one "bubble"  (cons "bubble" (cons "solid" empty))) (cons "bubble" (cons "bubble" (cons "solid" empty)))); no sink
;(define (sink-one b lob) lob); stub

(define (sink-one b lob)
  (cond [(empty? lob) (cons b lob)]        
        [else
         (if  (solid? b)
              (cons (first lob) (cons b (rest lob)))
              (cons b lob))]))

;; Blob -> Boolean
;; Return true if b = "solid"
(check-expect (solid? "solid")  true)
(check-expect (solid? "bubble") false)
;(define (solid? b) true); stub

(define (solid? b)
  (cond [(string=? b "solid")   true]
        [(string=? b "bubble")  false]))
