(require 2htdp/image)
(require 2htdp/universe)

;; Make it rain where ever we want

;; =================
;; Constants:

(define HEIGHT 300)
(define WIDTH  600)
(define MTS    (empty-scene HEIGHT WIDTH))
(define DROP-IMG (overlay/offset
                                 (triangle 30 "solid" "light blue" )
                                 0 17
                                 (circle 15 "solid" "light blue")))



;; =================
;; Data definitions:

(define-struct drop (x y))
;; Drop is (make-drop Number Number)
;; interp. a drop at position x, y

(define DROP-1 (make-drop (/ HEIGHT 2) (/ WIDTH 2)))
(define DROP-2 (make-drop 100          200))
#;
(define (fn-for-drop d)
  (... (drop-x d)(drop-y d)))

;; ListOfDrop os one of:
;; - empty
;; - (cons Drop ListOfDrop)
;; interp. a list of drops

(define LOD-1 empty)
(define LOD-2 (cons DROP-1 empty))
(define LOD-3 (cons DROP-2 LOD-2))
#;
(define (fn-for-LOD lod)
  (cond [(empty? lod) (...)]
        [ else
          (... (fn-for-drop(first lod))      ; Drop
               (fn-for-LOD(rest lod)))]))   ; ListOfDrop

;; =================
;; Functions:

;; ListOfDrop -> ListOfDrop
;; start the world with (main empty)
;; 
(define (main lod)
  (big-bang lod                  ; ListOfDrop
    (on-tick   next-drop)        ; ListOfDrop -> ListOfDrop
    (to-draw   draw-drop)        ; ListOfDrop -> Image
    (on-mouse  mouse-handler)))  ; ListOfDrop Integer Integer MouseEvent -> ListOfDrop
       
;; ListOfDrop -> ListOfDrop
;; produce the next drops position in the list by adding 1 to drop-y
;; !!!
(define (next-drop lod) lod)


;; ListOfDrop -> Image
;; render all drops into it's (x,y) position in the MTS
;; !!!
(define (draw-drop lod) MTS)

;; ListOfDrop Integer Integer MouseEvent -> ListOfDrop
;; Creates a new drop at mouse (x,y) position and adds it to ListOfDrop
;; !!!
(define (mouse-handler lod x y me) lod);