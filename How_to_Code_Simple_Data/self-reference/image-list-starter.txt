(require 2htdp/image)

;; image-list-starter.rkt

;; =================
;; Data definitions:

; 
; PROBLEM A:
; 
; Design a data definition to represent a list of images. Call it ListOfImage. 
; 


;; ListOfImage is one of:
;; - empty
;; - (cons Image ListOfImage)
;; interp. a list of images

(define IMG-1 (rectangle 5 20 "solid"   "red"))
(define IMG-2 (rectangle 8 10 "outline" "black"))
(define LOI-1 empty)
(define LOI-2 (cons IMG-1 (cons IMG-2 empty)))
#;
(define (fn-for-loi loi)
  (cond [(empty? loi) (...)]
        [ else
          (... (first loi)      ; Image
               (fn-for-loi(rest  loi)))]))  ; ListOfImage

;; template rules used:
;; - one of: 2 cases
;; - atomic distinct: empty
;; compound: (cons Image ListOfImage)
;; self-refernece: (rest loi) ListOfImage

;; 

;; =================
;; Functions:

; 
; PROBLEM B:
; 
; Design a function that consumes a list of images and produces a number 
; that is the sum of the areas of each image. For area, just use the image's 
; width times its height.
; 


;; ListOfImage -> Number
;; Produce the sum of the areas of each image in the list, if list is empty return 0
(check-expect (area-sum LOI-1) 0)
(check-expect (area-sum LOI-2) (+ (* 5 20) (* 8 10)))
;(define (area-sum loi) 0); stub

(define (area-sum loi)
  (cond [(empty? loi) 0]
        [ else
          (+ ( * (image-height (first loi)) (image-width (first loi)))
               (area-sum(rest  loi)))])) 



