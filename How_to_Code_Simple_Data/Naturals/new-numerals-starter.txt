
;; new-numerals-starter.rkt

; 
; PROBLEM:
; 
; Your friend has just given you a new pad, and it runs a prototype version of Racket. 
; 
; This is great, you can make it do anything. There's just one problem, this version of 
; racket doesn't include numbers as primitive data. There just are no numbers in it!
; 
; But you need natural numbers to write your next program.
; 
; No problem you say, because you remember the well-formed self-referential data definition 
; for Natural, as well as the idea that add1 is kind of like cons, and sub1 is kind of like
; rest. Your idea is to make add1 actually be cons, and sub1 actually be rest...
; 
; 


;; NATURAL is one of:
;; - empty
;; - (cons "!" NATURAL)
;; interp. a list of "!" where the count equals the natrual number

(define N-0 empty)           ; 0
(define N-1 (cons "!" N-0))  ; 1
(define N-2 (cons "!" N-1))  ; 2
(define N-3 (cons "!" N-2))  ; 3
(define N-4 (cons "!" N-3))  ; 4
(define N-5 (cons "!" N-4))  ; 5
(define N-6 (cons "!" N-5))  ; 6
(define N-7 (cons "!" N-6))  ; 7
(define N-8 (cons "!" N-7))  ; 8

;; Primative opertations to handle NATURAL
(define (ZERO? n) (empty? n))   ; Any -> Boolean
(define (ADD1  n) (cons "!" n)) ; NATURAL -> NATURAL
(define (SUB1  n) (rest n))     ; NATURAL -> NATURAL
#;
(define (fn-for-NATURAL n)
  (cond [(ZERO? n) (...)]
        [ else
          (... (first n)      ; empty
               (fn-for-NATURAL(rest n)))]))   ; NATURAL


;; NATURAL NATURAL -> NATURAL
;; Produce a + b
(check-expect (ADD N-0 N-1) N-1)
(check-expect (ADD N-2 N-3) N-5)
(check-expect (ADD N-3 N-4) N-7)
;(define (ADD a b) 0); stub

(define (ADD a b)
  (cond [(ZERO? b) a]
        [ else
          (ADD (ADD1 a)(SUB1 b))])) 

;; NATURAL NATURAL -> NATURAL
;; produce a - b
(check-expect (SUB N-1 N-0) N-1)
(check-expect (SUB N-3 N-2) N-1)
(check-expect (SUB N-4 N-2) N-2)
(check-expect (SUB N-5 N-1) N-4)
;(define (SUB a b) 0); stub

(define (SUB a b)
  (cond [(ZERO? b) a]
        [ else
          (SUB (SUB1 a)        ; empty
               (SUB1 b))]))   ; NATURAL
