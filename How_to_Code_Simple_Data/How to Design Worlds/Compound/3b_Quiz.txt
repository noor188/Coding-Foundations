; create a program that allows you to click on a spot on the screen to create a flower,
; which then grows over time. If you click again the first flower is replaced by a new
; one at the new position.



(require 2htdp/image)
(require 2htdp/universe)

;; Creates a flower on the mouse click spot, it grows over time

;; =================
;; Constants:
(define HEIGHT 400)
(define WIDTH  600)
(define MTS (empty-scene WIDTH HEIGHT))


;; =================
;; Data definitions:
(define-struct padal (width height))
;; Padal is  (make-padal Number Number)
<<<<<<< HEAD
;; interp. a (make-padal WIDTH HEIGHT) is a pinhole padal where :
;;         width  : the padal pinhole width radius
;;         height : the padel pinhole height
;;          creates a padel composied of one pinhole
=======
;; interp. a (make-padal width height) is a padal ellipse where :
;;           width  : the padal circle radius
;;           height : the padel tringle side-length
;;          creates a padel composied of an ellipse with width and height
>>>>>>> e4517cddb82b029ea5859cbe78dcd781f76ad8fe

(define PADAL-1 (make-padal 15 15))
#;
(define (fn-for-padal p)
  (... (padal-width p) (padal-height p)))

;; template rules used:
;; compound: 2 fields

(define-struct flower (ctr-x ctr-y ctr-radius padal))
;; Flower is (make-flower Number Number Number Padal)
;; interp.   (make-flower ctr-x ctr-y ctr-radius padals) is a flower where:
;;          ctr-x, ctr-y : the x,y postion of the flower on the MTS coordinate
;;            ctr-radius : is the flower center circle radius
;;                padals : one padal

(define FLOWER-1 (make-flower 0 (/ HEIGHT 2) 15 PADAL-1))
#;
(define (fn-for-flower f)
  (... (flower-ctr-x f) (flower-ctr-y f)    ; Number Number
       (flower-ctr-radius f)                ; Number
<<<<<<< HEAD
       (fn-for-padal(flower-padal f))))     ; Padal
=======
       (fn-for-padal(flower-padal f)))) ; Padal
>>>>>>> e4517cddb82b029ea5859cbe78dcd781f76ad8fe

;; template rule used:
;; compoud : 3 fields , Flower
;; compound : 2 fields, Padal


;; =================
;; Functions:

;; FLower -> FLower
;; start the world with (main (make-flower 0 0 0 (make-padal 0 0)))
;; 
(define (main f)
  (big-bang f                           ; FLower
            (on-tick   next-flower)     ; FLower -> FLower
            (to-draw   render-flower)   ; FLower -> Image          
            (on-mouse  mouse-handler))) ; FLower Integer Integer MouseEvent -> FLower
          

;; FLower -> FLower
<<<<<<< HEAD
;; produce the next FLower ctr-circle by adding 1 and (padel width height)
(check-expect (next-flower (make-flower 0 (/ HEIGHT 2) 15 PADAL-1)) (make-flower 0 (/ HEIGHT 2) (+ 15 1) (next-padal PADAL-1)))
;(define (next-flower f) FLOWER-1); stub

(define (next-flower f)
  (make-flower (flower-ctr-x f) (flower-ctr-y f) ; Number Number
               (+ (flower-ctr-radius f)  1)      ; Number
               (next-padal(flower-padal f))))    ; Padal


;; padal -> padal
;; produce the next padal by adding 1 to both width and height
(check-expect (next-padal (make-padal 15 15)) (make-padal (+ 15 1) (+ 15 1)))
;(define (next-padal p) PADAL-1); stub

(define (next-padal p)
=======
;; produce the next FLower ctr-circle by adding 1 and the next padel
(check-expect (next-flower (make-flower 0 (/ HEIGHT 2) 15 PADAL-1)) (make-flower 0 (/ HEIGHT 2) (+ 15 1) (next-padel PADAL-1)))
;(define (next-flower f) FLOWER-1); stub

(define (next-flower f)
  (make-flower (flower-ctr-x f) (flower-ctr-y f)   ; Number Number
               (+ (flower-ctr-radius f) 1)         ; Number
               (next-padel(flower-padal f))))      ; Padal

;; Padel -> Padel
;; Produce the next padel circle-radius, side-length by adding 1 to each
(check-expect (next-padel (make-padal 5 5)) (make-padal (+ 5 1) (+ 5 1)))
;(define (next-padel p) PADAL-1); stub

(define (next-padel p)
>>>>>>> e4517cddb82b029ea5859cbe78dcd781f76ad8fe
  (make-padal (+ (padal-width p) 1) (+ (padal-height p) 1)))


;; FLower -> Image
<<<<<<< HEAD
;; render the created flower at x,y postion onto the MTS coordinate 
(check-expect (render-flower (make-flower 0 (/ HEIGHT 2) 15 PADAL-1)) (place-image (draw-flower (make-flower 0 (/ HEIGHT 2) 15 PADAL-1)) 0 (/ HEIGHT 2) MTS))
;(define (render-flower f) MTS); stub

(define (render-flower f)
  (place-image (draw-flower f)
               (flower-ctr-x f)
               (flower-ctr-y f)   
                MTS)) 


;; Flower -> Image
;; draws a flower composed of one circle and 6 padals
(check-expect (draw-flower (make-flower 0 (/ HEIGHT 2) 15 PADAL-1)) (clear-pinhole
                                                                     (overlay/pinhole
                                                                     (circle 15 "solid" "yellow")
                                                                     (rotate (* 60 0) (draw-petal PADAL-1))
                                                                     (rotate (* 60 0) (draw-petal PADAL-1))
                                                                     (rotate (* 60 0) (draw-petal PADAL-1))
                                                                     (rotate (* 60 0) (draw-petal PADAL-1))
                                                                     (rotate (* 60 0) (draw-petal PADAL-1))
                                                                     (rotate (* 60 0) (draw-petal PADAL-1)))))
;(define (draw-flower f) MTS); stub

(define (draw-flower f)
  (... (flower-ctr-x f) (flower-ctr-y f)    ; Number Number
       (flower-ctr-radius f)                ; Number
       (fn-for-padal(flower-padal f)))) ; Padal



;; Padal -> Image
;; draws a padal compoused of a pinhole
;; !!!
(define (draw-petal p) MTS); stub
=======
;; display an empty scene
(check-expect (render-flower (make-flower 0 (/ HEIGHT 2) 15 PADAL-1)) MTS)
;(define (render-flower f) MTS); stub

(define (render-flower f)
         MTS) ; Padal

>>>>>>> e4517cddb82b029ea5859cbe78dcd781f76ad8fe

;; FLower Integer Integer MouseEvent -> FLower
;; Creates a Flower on the clicked mouse spot, and render the flower at x,y pos onto the MTS coordinate
(check-expect (mouse-handler (make-flower 0 (/ HEIGHT 2) 15 PADAL-1) 5 (/ WIDTH 2) "button-down") (make-flower 0 (/ HEIGHT 2) 15 PADAL-1)) 5 (/ WIDTH 2)  MTS)
(check-expect (mouse-handler (make-flower 0 (/ HEIGHT 2) 15 PADAL-1) 5 (/ WIDTH 2) "button-up"  ) (make-flower 0 (/ HEIGHT 2) 15 PADAL-1)) 0 (/ HEIGHT 2) MTS)
;(define (mouse-handler f x y me) FLOWER-1); stub

(define (mouse-handler f x y me)
  (cond [(mouse=? me "button-down") (place-image (draw-flower f) x y MTS)]
        [else                       (place-image (draw-flower f)(flower-ctr-x f) (flower-ctr-y f) MTS)]))


;; Flower -> Image
;; produces the flower
(check-expect (draw-flower (make-flower 0 (/ HEIGHT 2) 15 PADAL-1)) (clear-pinhole (overlay/pinhole (circle 15 "solid" "yellow")
                                                                                     (rotate (* 60 0) (petal-image PADAL-1))
                                                                                     (rotate (* 60 0) (petal-image PADAL-1))
                                                                                     (rotate (* 60 0) (petal-image PADAL-1))
                                                                                     (rotate (* 60 0) (petal-image PADAL-1))
                                                                                     (rotate (* 60 0) (petal-image PADAL-1))
                                                                                     (rotate (* 60 0) (petal-image PADAL-1)))))
;(define (draw-flower f) MTS); Stub

(define (draw-flower f)
  (clear-pinhole (overlay/pinhole (circle (flower-ctr-radius f) "solid" "yellow")
                                  (rotate (* 60 0) (petal-image (flower-padal f)))
                                  (rotate (* 60 0) (petal-image (flower-padal f)))
                                  (rotate (* 60 0) (petal-image (flower-padal f)))
                                  (rotate (* 60 0) (petal-image (flower-padal f)))
                                  (rotate (* 60 0) (petal-image (flower-padal f)))
                                  (rotate (* 60 0) (petal-image (flower-padal f)))
                  )
                 )
  )





;; Padal -> Image
;; draws a padal
(check-expect (petal-image (make-padal 5 5)) (put-pinhole  0 0 (ellipse 5 5 "solid" "red")))
;(define (petal-image p) MTS); stub

(define (petal-image p)
  (put-pinhole  0 0 (ellipse (padal-width p) (padal-height p) "solid" "red")))

