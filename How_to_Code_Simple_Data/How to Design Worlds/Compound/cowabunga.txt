
; 
; PROBLEM:
; 
; As we learned in the cat world programs, cats have a mind of their own. When they 
; reach the edge they just keep walking out of the window.
; 
; Cows on the other hand are docile creatures. They stay inside the fence, walking
; back and forth nicely.
; 
; Design a world program with the following behaviour:
;    - A cow walks back and forth across the screen.
;    - When it gets to an edge it changes direction and goes back the other way
;    - When you start the program it should be possible to control how fast a
;      walker your cow is.
;    - Pressing space makes it change direction right away.
;    
; To help you here are two pictures of the right and left sides of a lovely cow that 
; was raised for us at Brown University.
; 
; .     .
; 
; Once your program works here is something you can try for fun. If you rotate the
; images of the cow slightly, and you vary the image you use as the cow moves, you
; can make it appear as if the cow is waddling as it walks across the screen.
; 
; Also, to make it look better, arrange for the cow to change direction when its
; nose hits the edge of the window, not the center of its body.
; 



(require 2htdp/image)
(require 2htdp/universe)

;; Animation of a walking cow back and fourth accross the screen

;; =================
;; Constants:
(define HEIGHT 200)
(define WIDTH  400)
(define CTR-Y  (/ HEIGHT 2))
(define MTS (empty-scene WIDTH HEIGHT))
(define RCOW .)
(define LCOW  .)
(define ANGLE 20)

;; =================
;; Data definitions:

(define-struct cow (x dx angle))
;; Cow is (make-cow Natural[0,WIDTH] Integer ANGLE)
;; interp. (make-cow x dx) is a cow with:
;;                 x: cow x position on the MTS coordinate
;;                dx: velocity, pixel per tick
;;             angle: cow image rotation angle

(define CX1 (make-cow 0            3    ANGLE )) ; start
(define CX2 (make-cow (/ WIDTH 2) -3 (- ANGLE))) ; middle
(define CX3 (make-cow WIDTH        7    ANGLE )) ; edge
#;
(define (fn-for-cowx cx)
  (...(cow-x cx)(cow-dx cx) (cow-x angle)))

;; template rules used:
;; Compound: 3 fields

;; =================
;; Functions:

;; Cow -> Cow
;; start the world with ...
;; 
(define (main cx)
  (big-bang cx                        ; Cow
            (on-tick   next-cow)      ; Cow -> Cow
            (to-draw   render-cow)    ; Cow -> Image           
            (on-key    key-handler))) ; Cow KeyEvent -> Cow

;; Cow -> Cow
;; produce the next cow x postion by adding dx to x, if passed the edge set x to (0 or WIDTH) and reverse dx
(check-expect (next-cow (make-cow (/ WIDTH 2) 3 ANGLE)) (make-cow (+ (/ WIDTH 2)  3)  3 (choose-angle ANGLE))) ; middle
(check-expect (next-cow (make-cow (/ WIDTH 2)-3 ANGLE)) (make-cow (+ (/ WIDTH 2) -3) -3 (choose-angle ANGLE))) ; middle

(check-expect (next-cow (make-cow 3 -3 ANGLE))         (make-cow 0    -3 (choose-angle ANGLE))) ; edge
(check-expect (next-cow (make-cow (- WIDTH 3)3 ANGLE)) (make-cow WIDTH 3 (choose-angle ANGLE))) ; edge

(check-expect (next-cow (make-cow 3 -4 ANGLE))         (make-cow 0      4 (choose-angle ANGLE))) ; try to pass the edge
(check-expect (next-cow (make-cow (- WIDTH 3)4 ANGLE)) (make-cow WIDTH -4 (choose-angle ANGLE))) ; try to pass the edge

;(define (next-cow cx) CX1) ;stub

;<template from Cow>
(define (next-cow cx)
  (cond [(> (+ (cow-x cx)(cow-dx cx)) WIDTH) (make-cow WIDTH (-(cow-dx cx)) (choose-angle (cow-angle cx)))]
        [(< (+ (cow-x cx)(cow-dx cx))     0) (make-cow 0     (-(cow-dx cx)) (choose-angle (cow-angle cx)))]
        [else                                (make-cow (+ (cow-x cx)(cow-dx cx))(cow-dx cx) (choose-angle (cow-angle cx)))]
   ))

;; Number -> Number
;; reflects the input sign
(check-expect (choose-angle    ANGLE)  (- ANGLE))
(check-expect (choose-angle (- ANGLE))    ANGLE)
;(define (choose-angle ang) ANGLE); stub

(define (choose-angle ang)
  (- ang))
 
;; Cow -> Image
;; render cow image into the MTS
(check-expect (render-cow (make-cow 3 -3 ANGLE)) (place-image (choose-image (make-cow 3 -3 ANGLE)) 3 CTR-Y MTS)) ; dx < 0
(check-expect (render-cow (make-cow 3  3 ANGLE)) (place-image (choose-image (make-cow 3  3 ANGLE)) 3 CTR-Y MTS)) ; dx > 0
;(define (render-cow cx) LCOW); stub

;<template from Cow>
(define (render-cow cx)
  (place-image (choose-image cx) (cow-x cx) CTR-Y MTS)
   )

;; Cow -> Image  
;; produce the appropriate cow image depending on dx and rotates it by (cow-angle cx), if dx = 0 return RCOW
(check-expect (choose-image (make-cow 3 -3 ANGLE)) (rotate ANGLE LCOW))
(check-expect (choose-image (make-cow 3  3 ANGLE)) (rotate ANGLE RCOW))
;(define (choose-image c) LCOW); stub

;<template used from cow>
(define (choose-image cx)
  (if (< (cow-dx cx) 0)
      (rotate (cow-angle cx) LCOW)
      (rotate (cow-angle cx) RCOW)))


;; Cow KeyEvent -> Cow
;; changes cow direction dx
(check-expect (key-handler (make-cow 3 -3 ANGLE) " ")    (make-cow 3 3  ANGLE))
(check-expect (key-handler (make-cow 3 -3 ANGLE ) "left")(make-cow 3 -3 ANGLE))
;(define (key-handler cx ke) CX1); stub

;<template used from cow>
(define (key-handler cx ke)
  (if (string=? " " ke)
      (make-cow (cow-x cx)(-(cow-dx cx)) (cow-angle cx))
      cx))
