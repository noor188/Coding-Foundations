(require 2htdp/image)
(require 2htdp/universe)

;; countdown-animation starter.rkt

; 
; PROBLEM:
; 
; Design an animation of a simple countdown. 
; 
; Your program should display a simple countdown, that starts at ten, and
; decreases by one each clock tick until it reaches zero, and stays there.
; 
; To make your countdown progress at a reasonable speed, you can use the 
; rate option to on-tick. If you say, for example, 
; (on-tick advance-countdown 1) then big-bang will wait 1 second between 
; calls to advance-countdown.
; 
; Remember to follow the HtDW recipe! Be sure to do a proper domain 
; analysis before starting to work on the code file.
; 
; Once you are finished the simple version of the program, you can improve
; it by reseting the countdown to ten when you press the spacebar.
; 


;; Display a countdown, starts from 10 and decreases by 1 until reaches zero

;; =================
;; Constants:
(define WIDTH  100)
(define HEIGHT 100)
(define MTS (empty-scene WIDTH HEIGHT))
(define CTR-Y (/ WIDTH 2))
(define CTR-X (/ WIDTH 2))

;; =================
;; Data definitions:

;; Countdown is Integer[0,10]
;; interp. the number in the countdown
(define cd1 10) ; start 
(define cd2  5) ; middle
(define cd3  0) ; end

#;
(define (fn-for-Count-down cd)
  (... cd))

;; Template rules used:
;; - atomic non-distinct: Integer[0,10]

;; =================
;; Functions:

;; Countdown -> Countdown
;; start the world with (main 10)
;; 
(define (main cd)
  (big-bang cd                       ; Countdown
            (on-tick   tock 2)       ; Countdown -> Countdown
            (to-draw   render)       ; Countdown -> Image
            (on-key    handle-key))) ; Countdown KeyEvent -> Countdown
           

;; Countdown -> Countdown
;; produce the next Countdown number by subtracting 1
(check-expect (tock 10) (- 10 1))
(check-expect (tock  5) (-  5 1))
(check-expect (tock  0)        0)

;(define (tock cd) 0); stub

;<use template from Countdown>
(define (tock cd)
  (if (= cd 0)
      0
      (- cd 1)))


;; Countdown -> Image
;; render the Countdown into the MTS at (CTR-X,CTR-Y) postion 
(check-expect (render 10) (overlay (text (number->string 10) 40 "red") MTS))
(check-expect (render  5) (overlay (text (number->string  5) 40 "red") MTS))
(check-expect (render  0) (overlay (text (number->string  0) 40 "red") MTS))

;(define (render cd) MTS) ;stub

;<use template from Countdown>
(define (render cd)
        (overlay (text (number->string cd) 40 "red") MTS))


;; Countdown KeyEvent -> Countdown
;; Reset the Countdown to 10 when the space bar is pressed
(check-expect (handle-key 10 " ")    10)
(check-expect (handle-key 10 "left") 10)
(check-expect (handle-key  0 " ")    10)
(check-expect (handle-key  0 "left")  0)

;(define (handle-key cd ke) 0); stub

;<template from KeyEvent>
(define (handle-key Countdown ke)
  (cond [(key=? ke " ") 10]
        [else 
         Countdown]))