
;; cat-starter.rkt

; 
; PROBLEM:
; 
; Use the How to Design Worlds recipe to design an interactive
; program in which a cat starts at the left edge of the display 
; and then walks across the screen to the right. When the cat
; reaches the right edge it should just keep going right off 
; the screen.
; 
; Once your design is complete revise it to add a new feature,
; which is that pressing the space key should cause the cat to
; go back to the left edge of the screen. When you do this, go
; all the way back to your domain analysis and incorporate the
; new feature.
; 
; To help you get started, here is a picture of a cat, which we
; have taken from the 2nd edition of the How to Design Programs 
; book on which this course is based.
; 
; .
; 



(require 2htdp/image)
(require 2htdp/universe)

;; A cat that walks from left to right accross the screen

;; =================
;; Constants:

(define WIDTH  600)
(define HEIGHT 400)
(define CTR-Y  (/ HEIGHT 2))
(define MTS (empty-scene WIDTH HEIGHT "midnight blue"))
(define CAT-IMG .  )



;; =================
;; Data definitions:

;; CatX is Number
;; interp. x position of the cat in screen coordinates

(define CX1 0)              ; left edge
(define CX2 (/ WIDTH 2))    ; middle
(define CX3 WIDTH)          ; right edge

#;
(define (fn-for-cat-x CX)
  (... CX))

;; Template rules used:
;; - Atomic Non-Distinct: Number


;; =================
;; Functions:

;; CatX -> CatX
;; start the world with ...
;; 
(define (main CX)
  (big-bang CX                   ; CatX
            (on-tick   tock)     ; CatX -> CatX
            (to-draw   render)   ; CatX -> Image
            (stop-when ...)      ; CatX -> Boolean
            (on-mouse  ...)      ; CatX Integer Integer MouseEvent -> CatX
            (on-key    ...)))    ; CatX KeyEvent -> CatX

;; CatX -> CatX
;; produce the next ...
;; !!!
(define (tock CX) ...)


;; CatX -> Image
;; render ... 
;; !!!
(define (render CX) ...)