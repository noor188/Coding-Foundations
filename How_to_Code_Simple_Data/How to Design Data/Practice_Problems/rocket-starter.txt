;; =================
;; Data definitions:

; 
; PROBLEM A:
; 
; You are designing a program to track a rocket's journey as it descends 
; 100 kilometers to Earth. You are only interested in the descent from 
; 100 kilometers to touchdown. Once the rocket has landed it is done.
; 
; Design a data definition to represent the rocket's remaining descent. 
; Call it RocketDescent.
; 


;; RocketDescent is one of:
;; - Number[0,100]
;; - false
;; interp.
;;       Number[0,100] means rocket remaining descent
;;       false          means rocket has landed

(define RD1 0.5)   ; 
(define RD2 50)    ; halfway
(define RD3 100)   ; start descent
(define RD4 false) ; landed
#;
(define (fn-for-Roecket-Descent RD)
  (cond [ (and (number? RD) (<= 0 RD)(<= RD 100)) (... RD)]
        [ else (...)])
)

;; Template rules used:
;; - one of: 2 cases
;; - Aomic Non-Distinct: Number[0,100]
;; - Atomic Distinct value : false

;; =================
;; Functions:

; 
; PROBLEM B:
; 
; Design a function that will output the rocket's remaining descent distance 
; in a short string that can be broadcast on Twitter. 
; When the descent is over, the message should be "The rocket has landed!".
; Call your function rocket-descent-to-msg.
; 


;; RocketDescent -> String
;; Broadcast the remaining descent distance
(check-expect (rocket-descent->msg 100) "Altitude is 100 kms.")
(check-expect (rocket-descent->msg 50 ) "Altitude is 50 kms." )
(check-expect (rocket-descent->msg 0.5) "Altitude is 1/2 kms." )
(check-expect (rocket-descent->msg false) "The rocket has landed!")

;(define (rocket-descent-to-msg RD) "") ; stub

;<use template from RoecetDescent>

(define (rocket-descent->msg RD)
  (cond [ (and (number? RD) (<= 0 RD)(<= RD 100)) (string-append "Altitude is " (number->string RD) " kms.")]
        [ else "The rocket has landed!"])
)


