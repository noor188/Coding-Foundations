;; =================
;; Data definitions:

; 
; PROBLEM A:
; 
; You are assigned to develop a system that will classify 
; buildings in downtown Vancouver based on how old they are. 
; According to city guidelines, there are three different classification levels:
; new, old, and heritage.
; 
; Design a data definition to represent these classification levels. 
; Call it BuildingStatus.
; 


;; BuildingStatus is one of:
;; -"new"
;; -"old"
;; -"heritage"
;; interp. The status of a building based on age

;;<examples are edundant for enumerations>

#;
(define (fn-for-Building-Status bs)
  (cond [(string=? bs "new")      (...)]
        [(string=? bs "old")      (...)]
        [(string=? bs "heritage") (...)]))

;; Template Rules used:
;; - one of: 3 cases
;; - Atomic distinct value : "new"
;; - Atomic distinct value : "old"
;; - Atomic distinct value : "heritage"


;; =================
;; Functions:

; 
; PROBLEM B:
; 
; The city wants to demolish all buildings classified as "old". 
; You are hired to design a function called demolish? 
; that determines whether a building should be torn down or not.
; 


;; BuildingStatus -> Boolean
;; Produce true if BuildingStatus is old
(check-expect (demolish? "new")      false)
(check-expect (demolish? "old")      true )
(check-expect (demolish? "heritage") false)

;(define (demolish? d) true) ; stub

;<template used from BuildingStatus>
(define (demolish? bs)
  (cond [(string=? bs "new")      false]
        [(string=? bs "old")      true]
        [(string=? bs "heritage") false]))

